{"version":3,"sources":["components/Home/tron-couple-small.png","components/Home/tron-text-wh-small.png","components/Home/Home.js","components/Home/index.js","components/Games/Games.js","components/Games/index.js","components/Winner/Winner.js","components/App/App.js","components/Winner/index.js","components/App/index.js","data/initial.js","data/reducer.js","data/store.js","index.js"],"names":["Home","props","state","players","name","groups","pairs","winner","handleChange","bind","handleClick","handleGameOn","handleWinner","e","this","setState","currentTarget","value","preventDefault","handleAddPlayers","handleGetPairs","length","Number","isInteger","Math","log2","slice","error","player","clicked","src","tronTitleWhite","alt","className","class","tronCouple","onChange","type","onClick","map","index","id","Component","connect","Games","dispatch","Winner","App","start","initial","addPlayers","getPairs","games","i","j","floor","random","shuffle","output","n","push","player1","player2","reducer","action","added","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","initialState","persistState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8aeb22c7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tron-couple-small.ab0befb4.png\";","export default __webpack_public_path__ + \"static/media/tron-text-wh-small.e65edf51.png\";","import React, { Component } from \"react\";\nimport Games from 'react';\nimport home from './home.css';\nimport tronCouple from './tron-couple-small.png'\nimport tronTitleWhite from './tron-text-wh-small.png'\n\n\nclass Home extends Component {\n    \n    constructor (props) {\n        super(props);\n        this.state = {\n            players: [], \n            name: '',\n            groups: [],\n            pairs: [],\n            winner: false,\n    };\n   \n\nthis.handleChange = this.handleChange.bind(this);\nthis.handleClick = this.handleClick.bind(this);\nthis.handleGameOn = this.handleGameOn.bind(this);\n// this.handleNamesReset = this.handleNamesReset(this);\nthis.handleWinner = this.handleWinner.bind(this);\n}\n\n// what the user has typed in\nhandleChange(e) {\n    this.setState({ \n        name: e.currentTarget.value\n    }); \n} \n\n\nhandleClick(e) {\n    e.preventDefault();\nlet { name, players } = this.state;\n\n    // an empty string cannot be passed in\n    if (name !== \"\")  {\n        this.setState({\n            players: [...players, name],\n            name: \"\"\n        });\n    } else {\n        this.setState({\n            ...this.state,\n        });\n    }\n}\n\n\nhandleGameOn(e){\n    e.preventDefault();\n    let { players, groups } = this.state;\n    let { handleAddPlayers, handleGetPairs } = this.props;\n  \n    if (players.length >= 4 && Number.isInteger(Math.log2(players.length))) {\n        // handleAddPlayers({...this.state});\n        // handleGetPairs({...this.state}); \n        this.setState({\n            groups:[...groups, ...players.slice(groups, groups + 2)],\n        })\n    } else {\n        this.setState({\n            error: true,\n        });\n    }}\n\n\n\n// handleNamesReset(){\n//     this.setState({\n//         ...this.state,\n//         players: [],\n//     })\n// }\n\nhandleWinner(e){\n    e.preventDefault();\n    let { winner } = this.state;\n\n    // if(winner) {\n        this.setState({\n            winner: true,\n        })\n    // } else {\n    //     this.setState({\n    //         winner: false,\n    //     })\n    // }\n\n}\n    \n    render(){\n     //deconstruct any props here.\n     let { name, players, error, groups, player, winner, clicked } = this.state;\n\n     let ErrorMsgNoPlayers = \"Enter a minimum of 4 players and to the power of 2\";\n    \n     let winnerMsg = \"winner!\";\n\n        return (\n            <>\n                <body>\n                    <header>\n                        <img src={tronTitleWhite} alt=\"title tron pong\" className=\"tron-pong-title-wh\"/>\n                    </header>\n                    <div class=\"circle\"></div>\n                    <img src={tronCouple} alt=\"title tron pong\" className=\"tron-pong-couple\"/>\n                    <div className=\"card text-white home-container\">\n                        <div className=\"card-header\"></div>\n                        <div className=\"card-body\">\n                            <h5 className=\"welcome-message\">Welcome! Add your players and play a game of Tron Pong!</h5>\n                            <p className=\"rule first-rule\">First rule: Minimum of 4 players</p>\n                            <p className=\"rule second-rule\">Second rule: Only one pair to games, the rest will be rectified!</p>\n                            <form className=\"form\">\n                                <input \n                                    onChange={ this.handleChange } \n                                    className=\"type-in-box\" \n                                    value={ name } />\n                            </form>\n                            <button \n                                    type=\"button\" \n                                    className=\"btn btn-dark add\" \n                                    onClick={ this.handleClick }\n                                    >Add Players\n                            </button>\n                        </div>\n                    </div>\n\n                    <ul className= \"added-list\"  >\n                        {this.state.players.map((player, index) => (\n                            <li className=\"added-group-index\" \n                                key={ index }>{ player }</li>\n                        ))\n                        }\n                    </ul>\n                    {/* <div className=\"\">\n                        <button \n                        type=\"button\" \n                        className=\"btn btn-dark\" \n                        onClick={ this.handleNamesReset }\n                        >Delete Names</button>\n                    </div> */}\n                    \n                    <p className=\"error-msg\">{error ? ErrorMsgNoPlayers : null}</p>\n                    <button \n                        type=\"submit\" \n                        className=\"btn btn-danger game-on\" \n                        onClick={ this.handleGameOn }\n                        >Game On!\n                    </button>\n\n                    <ul className= \"list-pair\"  >\n                        {this.state.groups.map((player, index) => (\n                            \n                            <li className=\"added-group-index winner\" \n                                key={ index }><button \n                                                    type=\"submit\" \n                                                    className=\"btn btn-dark games-pair-btn\" \n                                                    onClick={ this.handleWinner }\n                                >{ player }</button>\n                            </li>\n                        ))\n                        }\n                        {/* { this.getPairs() } */}\n                    </ul>\n                    <p className=\"winner-message\" id=\"glow\">{winner ? winnerMsg : null}</p>\n                    {/* {winner ?  winner : null} */}\n                </body>\n            </>\n        )\n    }\n}\n\n// !winner ? winner : null\n// if it is not winner show winner else nothing happens\n\n// winner ? if it is winner show the winner\n\nexport default Home;\n\n","import { connect } from \"react-redux\";\nimport Home from \"./Home\";\nimport { addPlayer, getPairs } from \"../../data/actions\";\n\nconst mapStateToProps = state => {\n    return {\n        players: state.players,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n       handleAddPlayers: (players) => dispatch(addPlayer(players)),\n       handleGetPairs: (players) => dispatch(getPairs(players))\n    }\n}\n\nexport default connect(mapStateToProps)(Home);","import React, { Component } from \"react\";\n\nclass Games extends Component {\n\n    constructor (props) {\n        super(props);\n        this.state = {\n        \n    };\n}\n\n    render(){\n        return (\n            <div className=\"match\">\n            <button \n                onClick=\"\"\n                className=\"\">\n                     {/* playername */}\n            </button>\n\n            <button \n                onClick=\"\"\n                 className=\"\">\n                     {/* playername */}\n                </button>\n        </div>\n        )\n    }\n}\nexport default Games;","import { connect } from \"react-redux\";\nimport Games from \"./Games\";\nimport { } from \"../../data/actions\";\n\nconst mapStateToProps = state => {\n    return {\n\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps )(Games);","import React from \"react\";\n\nconst Winner = () => {\n\n    return(\n        <>\n            <form></form>\n        </>\n    );\n\n}\n\nexport default Winner;","import React from 'react';\n// import { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from \"../Home\";\nimport Games from \"../Games\";\nimport Winner from \"../Winner\";\n\nconst App = ({ start }) => (\n  <>\n        { !start ? <Home /> : <Games /> } \n  </>\n);\n\nexport default App;","import { connect } from \"react-redux\";\nimport Winner from \"./Winner\";\n// import { reset } from \"../../data/actions\";\n\nconst mapStateToProps = state => {\n    return {\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        // handleReset: (data) => dispatch(reset(data)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Winner);","import { connect } from \"react-redux\";\nimport App from \"./App\";\n\nconst mapStateToProps = ({start}) => {\n    return {\n        start: start,\n    };\n};\n\n\nexport default connect(mapStateToProps)(App);","const initial = {\n    players: [],\n    addPlayers: false,\n    start: false,\n    getPairs: [],\n    games: [], //games instead of matches\n}\n\nexport default initial;","import initial from './initial';\n\n\n\nconst addPlayers = (state, { players }) => ({\n    ...state,\n    players: players,\n    added: true\n})\n\nconst start = (state) => {\n    return {\n        ...state,\n        start: true,\n    };\n};\n\n// shuffle an array\nconst shuffle = (players) => {\n    // Fisher-Yates algorithm \n    for (let i = players.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [players[i], players[j]] = [players[j], players[i]];\n    }\n    return players;\n};\n\n// Retrieving pairs\nconst getPairs = players => {\n    shuffle( players );\n    var output = [];\n    for( var i = 0, n = players.length;  i < n;  i += 2 ) {\n        output.push({ player1: players[i], player2: players[i+1] });\n    }\n    return output;\n}\n\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"ADD_PLAYERS\": return start(addPlayers(state, action));\n        case \"GET_PAIRS\": return getPairs(state, action);\n        default: return state;\n    }\n};\n\nexport default reducer;","import { createStore, compose } from 'redux';\nimport persistState from \"redux-localstorage\";\nimport initialState from './initial';\nimport reducer from './reducer';\n\nconst composeEnhancers =\nwindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  reducer,\n  initialState,\n  composeEnhancers(persistState())\n);\n\nexport default store;\n\n\n// const store = createStore(\n//   reducer, \n//   initialState,\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n// );","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport store from './data/store';\nimport { Provider } from \"react-redux\";\n\n// let state = store.getState();\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store= { store }>\n            <App/>\n        </Provider>\n      </React.StrictMode>,\n  document.getElementById('root')\n  );\n\n\n// deleted -> player1 = {state.player1}, player2 = {state.player2} & serving = { state.serving } because state is now being checked by the mapstatetoprops function in the wrapper player 1 and player 2 files in player folder\n\n\n\n\n\n\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import store from './data/store';\n// import { Provider } from \"react-redux\";\n\n\n// let state = store.getState();\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <Provider store= { store }>\n        \n//             <App \n//                   handleIncrementPlayer1={ () => \n//                     store.dispatch({ type: \"INCREMENTPLAYER1\" })} \n                  \n                  \n//                   handleIncrementPlayer2={ () => \n//                   store.dispatch({ type: \"INCREMENTPLAYER2\" })}\n\n//              />\n//         </Provider>\n//       </React.StrictMode>,\n//   document.getElementById('root')\n//   );"],"sourceRoot":""}